# Arguments
set(ARM_OPTIONS "${MCPI_OPTIONS}")
list(APPEND ARM_OPTIONS "-DMCPI_BUILD_MODE:STRING=arm")
list(APPEND ARM_OPTIONS "-DCMAKE_INSTALL_MESSAGE:STRING=NEVER")
list(APPEND ARM_OPTIONS "-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>")
if(NOT MCPI_USE_PREBUILT_ARMHF_TOOLCHAIN)
    if(DEFINED CMAKE_TOOLCHAIN_FILE)
        set(ARM_TOOLCHAIN "${CMAKE_TOOLCHAIN_FILE}")
    endif()
else()
    set(ARM_TOOLCHAIN "${MCPI_CMAKE_TOOLCHAIN_FILE}")
endif()
if(DEFINED ARM_TOOLCHAIN)
    list(APPEND ARM_OPTIONS "-DCMAKE_TOOLCHAIN_FILE:FILEPATH=${ARM_TOOLCHAIN}")
endif()

# Force Rebuild If Needed
set(ARM_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/arm-components")
if(DEFINED MCPI_FORCE_ARM_REBUILD)
    file(REMOVE_RECURSE "${ARM_PREFIX}")
endif()

# Build
include(ExternalProject)
ExternalProject_Add(arm-components
    PREFIX "${ARM_PREFIX}"
    # Source Directory
    DOWNLOAD_COMMAND ""
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}"
    # Configure
    CMAKE_CACHE_ARGS ${ARM_OPTIONS}
    CMAKE_GENERATOR "Ninja Multi-Config"
    CONFIGURE_HANDLED_BY_BUILD TRUE
    # Build
    BUILD_COMMAND
        "${CMAKE_COMMAND}" "--build" "<BINARY_DIR>" "--config" "$<CONFIG>"
    BUILD_ALWAYS TRUE
    # Install
    INSTALL_COMMAND
        "${CMAKE_COMMAND}" "-E"
        "rm" "-rf" "<INSTALL_DIR>/${MCPI_INSTALL_DIR}"
    COMMAND
        "${CMAKE_COMMAND}" "-E" "env" "DESTDIR="
        "${CMAKE_COMMAND}" "--install" "<BINARY_DIR>" "--config" "$<CONFIG>"
    # Use Terminal
    USES_TERMINAL_CONFIGURE TRUE
    USES_TERMINAL_BUILD TRUE
    USES_TERMINAL_INSTALL TRUE
)

# Install
ExternalProject_Get_Property(arm-components INSTALL_DIR)
install(DIRECTORY "${INSTALL_DIR}/${MCPI_INSTALL_DIR}/" DESTINATION "${MCPI_INSTALL_DIR}")